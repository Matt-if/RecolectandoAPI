spring.profiles.active=prod

spring.application.name=api_recolectando
info.app.name=API recolectando
info.app.description=API Rest que hace de back-end para interaccion con el front-end.

#Context-Path ~~> root.
server.servlet.context-path=/api/v1

# ================ Logging with Logback, comes with SpringBoot ================
logging.level.root=INFO
logging.level.app=WARN
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=logs/recolectandoAPI.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.max-history=30

# ================== URLs for CORS configuration ===========================
url.cors.allowedOrigin1=http://localhost:5173
url.cors.allowedOrigin2=http://192.168.0.105:5173

# ================== Endpoints Exposure ====================================
#Enpoints que queremos exponer de la API
management.endpoints.web.exposure.include=*

# Enables the exposure of environment information through Spring Boot's
management.info.env.enabled=true

# management.endpoints.web.exposure.exclude=health,info

# Credenciales para autenticacion por defecto de spring security
# En este proyecto no las usamos porque la autenticacion es mediante JWT.
spring.security.user.name=a
spring.security.user.password=a

# ============================ Server config ===========================
# 0.0.0.0 lets the app accept requests from any network interface (including your LAN IP).
server.address=0.0.0.0
server.port=8080

# ======================= MySQL Configuration ==========================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER_NAME}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# por default ya es asi: spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# ====================== JWT Configuration ==============================
# The value is a Base64 encoding of a secure random 256-bit key.
jwt.secret.key=${JWT_SECRET_KEY}

# In [miliseconds]
jwt.access-token.expiration=${JWT_ACCESS_TOKEN_EXP}
jwt.refresh-token.expiration=${JWT_REFRESH_TOKEN_EXP}


